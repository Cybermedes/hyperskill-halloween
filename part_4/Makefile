# Compiler and flags
CC = gcc
CFLAGS = -Wall -Werror -Wextra -Wdeprecated-declarations -std=c17 -pedantic -O2 -march=native -flto -DNDEBUG
DEBUG_FLAGS = -g -Og -fsanitize=address,undefined -fno-omit-frame-pointer

# Output binary name
NAME = hyperskill

# Libraries and headers
# External libraries (math lib included by default)
LIBS = -L. -lm
# Header files include path
HEADERS = -I.

# File lists
CFILES = $(wildcard *.c)
OFILES = $(CFILES:.c=.o)
DEPFILES = $(OFILES:.o=.d) # Dependency files generated by -MMD

# Install path
INSTALL_PATH = ~/bin/ # Default path

# Declare phony targets (i.e., not real files)
.PHONY: build clean debug install help

all: build

# Build release version
build: $(OFILES)
	@$(CC) $(CFLAGS) $(HEADERS) -o $(NAME) $^ $(LIBS)
	@echo "‚õìÔ∏è  [\033[32mLINKING\033[0m]" $<


# Build with debugging options
debug: $(OFILES)
	@$(CC) $(CFLAGS) $(HEADERS) $(DEBUG_FLAGS) -o $(NAME) $^ $(LIBS)
	@echo "‚õìÔ∏è  [\033[32mLINKING\033[0m]" $<


# Pattern rule: how to build a .o from a .c
# -MMD tells compiler to generate a .d file alongside the .o file
%.o: %.c
	@$(CC) $(CFLAGS) $(HEADERS) -MMD -c $< -o $@
	@echo "üõ†Ô∏è  [\033[34mCOMPILING\033[0m]" $<

# Install the built binary
install: build
	@mkdir -p $(INSTALL_PATH)
	@cp -v $(NAME) $(INSTALL_PATH)

# Clean up build artifacts
clean:
	@for file in *.o *.d; do \
		if [ -f "$$file" ]; then \
			rm -f "$$file"; \
			echo "üî• [\033[31mDELETING\033[0m]" "$$file"; \
		fi; \
	done

# Show available targets
help:
	@echo "Available targets: all, build, debug, install, clean"

# Include the dependency files if they exist
# This lets Make know which .h files each .c file depends on
-include $(DEPFILES)
